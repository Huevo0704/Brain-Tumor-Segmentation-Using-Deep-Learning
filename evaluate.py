# evaluate.py
"""
File ch√≠nh ƒë·ªÉ ƒë√°nh gi√° m√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n b·ªô d·ªØ li·ªáu test.
Th·ª±c hi·ªán c√°c b∆∞·ªõc:
1. T·∫£i m√¥ h√¨nh v√† d·ªØ li·ªáu test.
2. L·∫∑p qua m·ªôt s·ªë ·∫£nh ng·∫´u nhi√™n.
3. V·ªõi m·ªói ·∫£nh:
    a. D·ª± ƒëo√°n b·∫±ng U-Net.
    b. √Åp d·ª•ng c√°c b∆∞·ªõc h·∫≠u x·ª≠ l√Ω (Median, Adaptive, Active Contour).
    c. T√≠nh to√°n di·ªán t√≠ch kh·ªëi u.
    d. Tr·ª±c quan h√≥a k·∫øt qu·∫£.
4. T·∫°o b·∫£ng t·ªïng h·ª£p k·∫øt qu·∫£ ph√¢n t√≠ch di·ªán t√≠ch.
"""

import os
import random
import numpy as np
import tensorflow as tf
import cv2
from skimage.filters import gaussian
from skimage.segmentation import active_contour

# Import c√°c module t·ª± ƒë·ªãnh nghƒ©a
import config
from utils import (
    dice_coefficient, iou, combined_loss,
    segment_tumor_adaptive, calculate_final_tumor_area,
    visualize_decomposition, plot_evaluation_results, create_summary_table
)

def load_model_with_custom_objects(model_path):
    """T·∫£i m√¥ h√¨nh Keras v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng t√πy ch·ªânh."""
    print(f"\n1. ƒêang t·∫£i model t·ª´ '{model_path}'...")
    custom_objects = {
        'combined_loss': combined_loss,
        'dice_coefficient': dice_coefficient,
        'iou': iou,
        'sensitivity': tf.keras.metrics.SensitivityAtSpecificity(0.5), # C·∫ßn cung c·∫•p m·ªôt metric instance
        'specificity': tf.keras.metrics.SpecificityAtSensitivity(0.5)
    }
    try:
        tf.keras.mixed_precision.set_global_policy('mixed_float16')
        model = tf.keras.models.load_model(model_path, custom_objects=custom_objects)
        print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!"); model.summary()
        return model
    except Exception as e:
        print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i model. D·ª´ng ch∆∞∆°ng tr√¨nh.\nChi ti·∫øt: {e}"); exit()

def main():
    """H√†m ch√≠nh th·ª±c hi·ªán quy tr√¨nh ƒë√°nh gi√°."""
    model = load_model_with_custom_objects(config.EVAL_MODEL_PATH)

    print(f"\n2. ƒêang t·∫£i b·ªô d·ªØ li·ªáu test t·ª´ '{config.X_TEST_PATH}'...")
    try:
        X_test = np.load(config.X_TEST_PATH)
        Y_test = np.load(config.Y_TEST_PATH)
        print(f"‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng! T√¨m th·∫•y {len(X_test)} m·∫´u.")
    except Exception as e:
        print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i t·ªáp d·ªØ li·ªáu .npy. D·ª´ng ch∆∞∆°ng tr√¨nh.\nChi ti·∫øt: {e}"); exit()

    num_samples = len(X_test)
    image_indices = random.sample(range(num_samples), min(num_samples, config.NUM_RANDOM_IMAGES_TO_TEST))
    print(f"\nüöÄ S·∫Ω x·ª≠ l√Ω {len(image_indices)} ·∫£nh ng·∫´u nhi√™n: {image_indices}\n")

    all_results = []
    pixel_area_mm2 = (25.4 / config.KNOWN_IMAGE_DPI) ** 2

    for i, idx in enumerate(image_indices):
        print("="*80 + f"\n====== X·ª¨ L√ù ·∫¢NH {i+1}/{len(image_indices)} (INDEX: {idx}) ======\n" + "="*80)
        
        original_image, ground_truth = X_test[idx], Y_test[idx].squeeze()
        image_resized = cv2.resize(original_image, config.TARGET_SIZE_EVAL).astype("float32")
        gt_resized = (cv2.resize(ground_truth, config.TARGET_SIZE_EVAL, cv2.INTER_NEAREST) > 0).astype(np.uint8)

        # 3. D·ª∞ ƒêO√ÅN V√Ä H·∫¨U X·ª¨ L√ù
        pred_mask = model.predict(np.expand_dims(image_resized, axis=[0, -1]))[0, ..., 0]
        pred_mask_binary = (pred_mask > 0.5).astype(np.uint8)
        
        if np.count_nonzero(pred_mask_binary) == 0:
            print(f"*** ‚ùó [·∫¢nh {idx}] K·∫æT QU·∫¢: KH√îNG PH√ÅT HI·ªÜN KH·ªêI U. B·ªè qua. ***\n"); continue

        # Pipeline h·∫≠u x·ª≠ l√Ω ƒë∆°n gi·∫£n h√≥a
        mask_median = (cv2.medianBlur(pred_mask_binary * 255, 5) > 127).astype(np.uint8)
        mask_adaptive = segment_tumor_adaptive(mask_median * 255, 21, 5)
        final_mask = mask_adaptive
        
        contours, _ = cv2.findContours(mask_adaptive * 255, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            snake = active_contour(gaussian(image_resized, 1), np.squeeze(max(contours, key=cv2.contourArea)), alpha=0.01, beta=0.1, gamma=0.001)
            temp_mask = np.zeros_like(final_mask); cv2.fillPoly(temp_mask, [snake.astype(np.int32)], 255)
            final_mask = (temp_mask / 255).astype(np.uint8)

        # 4. T√çNH TO√ÅN V√Ä L∆ØU K·∫æT QU·∫¢
        gt_geom_mm2, gt_pixel_mm2 = calculate_final_tumor_area(gt_resized, pixel_area_mm2)
        pred_geom_mm2, pred_pixel_mm2 = calculate_final_tumor_area(final_mask, pixel_area_mm2)
        
        all_results.append({"index": idx, "gt_geom": gt_geom_mm2, "pred_geom": pred_geom_mm2, "gt_pixel": gt_pixel_mm2, "pred_pixel": pred_pixel_mm2})
        
        # 5. TR·ª∞C QUAN H√ìA
        img_vis = (image_resized * 255).astype(np.uint8)
        triangulated_img = visualize_decomposition(img_vis, final_mask, show=False)
        plot_evaluation_results(image_resized, gt_resized, final_mask, triangulated_img, idx)

    # 6. T·∫†O B·∫¢NG T·ªîNG H·ª¢P
    os.makedirs(config.EVALUATION_OUTPUT_DIR, exist_ok=True)
    summary_path = os.path.join(config.EVALUATION_OUTPUT_DIR, "summary_area_analysis.png")
    create_summary_table(all_results, summary_path)
    
    print("\nüéâ HO√ÄN T·∫§T TO√ÄN B·ªò QUY TR√åNH ƒê√ÅNH GI√Å. üéâ")

if __name__ == '__main__':
    main()
